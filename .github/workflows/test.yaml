name: Test Build

on:
  push:
    branches:
      - test
  workflow_dispatch:

jobs:
  build:
    runs-on: arc-runner-set

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.HARBOR_REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_PASSWORD }}

    - name: Get short SHA
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Get repository name
      id: get_repo
      run: echo "repo=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

    - name: Install cosign
      run: |
        COSIGN_VERSION=$(curl -s https://api.github.com/repos/sigstore/cosign/releases/latest | jq -r .tag_name)
        curl -Lo cosign https://github.com/sigstore/cosign/releases/download/$COSIGN_VERSION/cosign-linux-amd64
        chmod +x cosign
        sudo mv cosign /usr/local/bin/

    - name: Write COSIGN_PRIVATE_KEY to file
      run: |
        echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
        chmod 600 cosign.key

    - name: Build and push Docker image
      run: |
        docker buildx create --use
        docker buildx inspect --bootstrap
        docker buildx build --platform linux/amd64,linux/arm64 \
          -t ${{ secrets.HARBOR_REGISTRY }}/homelab/${{ env.repo }}:${{ env.sha_short }} \
          -t ${{ secrets.HARBOR_REGISTRY }}/homelab/${{ env.repo }}:latest \
          --push .

    - name: Sign Docker image with cosign
      env:
        COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      run: |
        cosign sign --key cosign.key \
          ${{ secrets.HARBOR_REGISTRY }}/homelab/${{ env.repo }}:${{ env.sha_short }}
        cosign sign --key cosign.key \
          ${{ secrets.HARBOR_REGISTRY }}/homelab/${{ env.repo }}:latest

    - name: Clean up COSIGN_PRIVATE_KEY file
      run: rm -f cosign.key